AR = ar
CC = gcc
LD = gcc
#ASM = nasm
ASM = nasmw
ASMFLAGS = -f coff
VPATH=src $(wildcard src/cpu/*)

ifdef K6
EMULATOR_EXE = mamek6.exe
ARCH = -march=k6
else
ifdef I686
EMULATOR_EXE = mameppro.exe
ARCH = -march=pentiumpro
else
EMULATOR_EXE = mess.exe
ARCH = -march=pentium
endif
endif

# uncomment next line to include the debugger
# DEBUG = 1

# uncomment next line to do a smaller compile including only one driver
# TINY_COMPILE = 1
TINY_NAME = finalizr_driver
TINY_OBJS = obj/drivers/finalizr.o obj/vidhrdw/finalizr.o obj/machine/konami.o

# uncomment one of the two next lines to not compile the NeoGeo games or to
# compile only the NeoGeo games
NEOFREE = 1
# NEOMAME = 1

# uncomment next line to include the symbols for symify
# SYMBOLS = 1

# uncomment next line to use Assembler 68k engine
X86_ASM_68K = 1

ifdef NEOMAME
CPUS+=Z80@
CPUS+=M68000@
SOUNDS+=YM2610@
else
# uncomment the following lines to include a CPU core
#CPUS+=GENSYNC@
CPUS+=Z80@
#CPUS+=Z80_VM@
#CPUS+=8080@
#CPUS+=8085A@
CPUS+=M6502@
CPUS+=M65C02@
CPUS+=M6510@
#CPUS+=N2A03@
CPUS+=H6280@
CPUS+=I86@
#CPUS+=V20@
#CPUS+=V30@
#CPUS+=V33@
#CPUS+=I8035@
#CPUS+=I8039@
#CPUS+=I8048@
#CPUS+=N7751@
#CPUS+=M6800@
#CPUS+=M6801@
#CPUS+=M6802@
#CPUS+=M6803@
#CPUS+=M6808@
#CPUS+=HD63701@
#CPUS+=NSC8105@
#CPUS+=M6805@
#CPUS+=M68705@
#CPUS+=HD63705@
#CPUS+=HD6309@
CPUS+=M6809@
#CPUS+=KONAMI@
CPUS+=M68000@
#CPUS+=M68010@
#CPUS+=M68020@
#CPUS+=T11@
#CPUS+=S2650@
#CPUS+=TMS34010@
CPUS+=TMS9900@
#CPUS+=Z8000@
#CPUS+=TMS320C10@
#CPUS+=CCPU@
CPUS+=PDP1@

# uncomment the following lines to include a sound core
SOUNDS+=CUSTOM@
SOUNDS+=SAMPLES@
SOUNDS+=DAC@
SOUNDS+=AY8910@
#SOUNDS+=YM2203@
#SOUNDS+=YM2151@
#SOUNDS+=YM2151_ALT@
#SOUNDS+=YM2608@
#SOUNDS+=YM2610@
#SOUNDS+=YM2610B@
SOUNDS+=YM2612@
#SOUNDS+=YM3438@
#SOUNDS+=YM2413@
SOUNDS+=YM3812@
#SOUNDS+=YM3526@
#SOUNDS+=Y8950@
SOUNDS+=SN76496@
SOUNDS+=POKEY@
SOUNDS+=TIA@
SOUNDS+=NES@
SOUNDS+=ASTROCADE@
#SOUNDS+=NAMCO@
SOUNDS+=TMS5220@
#SOUNDS+=VLM5030@
#SOUNDS+=ADPCM@
#SOUNDS+=OKIM6295@
#SOUNDS+=MSM5205@
#SOUNDS+=UPD7759@
#SOUNDS+=HC55516@
#SOUNDS+=K005289@
#SOUNDS+=K007232@
#SOUNDS+=K051649@
#SOUNDS+=K053260@
#SOUNDS+=SEGAPCM@
#SOUNDS+=RF5C68@
#SOUNDS+=CEM3394@
#SOUNDS+=C140@
#SOUNDS+=QSOUND@
endif


# check that the required libraries are available
ifeq ($(wildcard $(DJDIR)/lib/liballeg.a),)
noallegro:
	@echo Missing Allegro library! Get it from http://www.talula.demon.co.uk/allegro/
endif
ifeq ($(wildcard $(DJDIR)/lib/libaudio.a),)
noseal:
	@echo Missing SEAL library! Get it from http://www.egerter.com/
endif
ifeq ($(wildcard $(DJDIR)/lib/libz.a),)
nozlib:
	@echo Missing zlib library! Get it from http://www.cdrom.com/pub/infozip/zlib/
endif

#if obj subdirectory doesn't exist, create the tree before proceeding
ifeq ($(wildcard ./obj),)
noobj: maketree all
endif



# List of CPU core (and, for a debug build, disassembler) object files
CPUDEFS =
CPUOBJS =
DBGOBJS =
ASMDEFS =

CPU=$(strip $(findstring GENSYNC@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_GENSYNC=1
CPUOBJS += obj/cpu/gensync/gensync.o
DBGOBJS += obj/cpu/gensync/gensyncd.o
endif

CPU=$(strip $(findstring Z80@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_Z80=1
CPUOBJS += obj/cpu/z80/z80.o
DBGOBJS += obj/cpu/z80/z80dasm.o
endif

CPU=$(strip $(findstring Z80_VM@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_Z80_VM=1
CPUOBJS += obj/cpu/z80/z80_vm.o
DBGOBJS += obj/cpu/z80/z80dasm.o
endif

CPU=$(strip $(findstring 8080@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_8080=1
CPUOBJS += obj/cpu/i8085/i8085.o
DBGOBJS += obj/cpu/i8085/8085dasm.o
endif

CPU=$(strip $(findstring 8085A@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_8085A=1
CPUOBJS += obj/cpu/i8085/i8085.o
DBGOBJS += obj/cpu/i8085/8085dasm.o
endif

CPU=$(strip $(findstring M6502@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6502=1
CPUOBJS += obj/cpu/m6502/m6502.o
DBGOBJS += obj/cpu/m6502/6502dasm.o
endif

CPU=$(strip $(findstring M65C02@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M65C02=1
CPUOBJS += obj/cpu/m6502/m6502.o
DBGOBJS += obj/cpu/m6502/6502dasm.o
endif

CPU=$(strip $(findstring M6510@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6510=1
CPUOBJS += obj/cpu/m6502/m6502.o
DBGOBJS += obj/cpu/m6502/6502dasm.o
endif

CPU=$(strip $(findstring N2A03@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_N2A03=1
CPUOBJS += obj/cpu/m6502/m6502.o
DBGOBJS += obj/cpu/m6502/6502dasm.o
endif

CPU=$(strip $(findstring H6280@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_H6280=1
CPUOBJS += obj/cpu/h6280/h6280.o
DBGOBJS += obj/cpu/h6280/6280dasm.o
endif

CPU=$(strip $(findstring I86@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_I86=1
CPUOBJS += obj/cpu/i86/i86.o
DBGOBJS += obj/cpu/i86/i86dasm.o
endif

CPU=$(strip $(findstring V20@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_V20=1
CPUOBJS += obj/cpu/nec/nec.o
DBGOBJS += obj/cpu/nec/necdasm.o
endif

CPU=$(strip $(findstring V30@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_V30=1
CPUOBJS += obj/cpu/nec/nec.o
DBGOBJS += obj/cpu/nec/necdasm.o
endif

CPU=$(strip $(findstring V33@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_V33=1
CPUOBJS += obj/cpu/nec/nec.o
DBGOBJS += obj/cpu/nec/necdasm.o
endif

CPU=$(strip $(findstring I8035@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_I8035=1
CPUOBJS += obj/cpu/i8039/i8039.o
DBGOBJS += obj/cpu/i8039/8039dasm.o
endif

CPU=$(strip $(findstring I8039@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_I8039=1
CPUOBJS += obj/cpu/i8039/i8039.o
DBGOBJS += obj/cpu/i8039/8039dasm.o
endif

CPU=$(strip $(findstring I8048@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_I8048=1
CPUOBJS += obj/cpu/i8039/i8039.o
DBGOBJS += obj/cpu/i8039/8039dasm.o
endif

CPU=$(strip $(findstring N7751@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_N7751=1
CPUOBJS += obj/cpu/i8039/i8039.o
DBGOBJS += obj/cpu/i8039/8039dasm.o
endif

CPU=$(strip $(findstring M6800@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6800=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring M6801@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6801=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring M6802@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6802=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring M6803@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6803=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring M6808@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6808=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring HD63701@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_HD63701=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring NSC8105@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_NSC8105=1
CPUOBJS += obj/cpu/m6800/m6800.o
DBGOBJS += obj/cpu/m6800/6800dasm.o
endif

CPU=$(strip $(findstring M6805@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6805=1
CPUOBJS += obj/cpu/m6805/m6805.o
DBGOBJS += obj/cpu/m6805/6805dasm.o
endif

CPU=$(strip $(findstring M68705@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M68705=1
CPUOBJS += obj/cpu/m6805/m6805.o
DBGOBJS += obj/cpu/m6805/6805dasm.o
endif

CPU=$(strip $(findstring HD63705@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_HD63705=1
CPUOBJS += obj/cpu/m6805/m6805.o
DBGOBJS += obj/cpu/m6805/6805dasm.o
endif

CPU=$(strip $(findstring HD6309@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_HD6309=1
CPUOBJS += obj/cpu/m6809/m6809.o
DBGOBJS += obj/cpu/m6809/6809dasm.o
endif

CPU=$(strip $(findstring M6809@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M6809=1
CPUOBJS += obj/cpu/m6809/m6809.o
DBGOBJS += obj/cpu/m6809/6809dasm.o
endif

CPU=$(strip $(findstring KONAMI@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_KONAMI=1
CPUOBJS += obj/cpu/konami/konami.o
DBGOBJS += obj/cpu/konami/knmidasm.o
endif

CPU=$(strip $(findstring M68000@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M68000=1
ifdef X86_ASM_68K
CPUOBJS += obj/cpu/m68000/asmintf.o obj/cpu/m68000/68kem.oa
ASMDEFS += -DA68KEM
else
CPUOBJS += obj/cpu/m68000/m68kops.og obj/cpu/m68000/m68kopac.og \
           obj/cpu/m68000/m68kopdm.og obj/cpu/m68000/m68kopnz.og \
           obj/cpu/m68000/m68kcpu.o obj/cpu/m68000/m68kmame.o
endif
DBGOBJS += obj/cpu/m68000/d68k.o
endif

CPU=$(strip $(findstring M68010@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M68010=1
ifdef X86_ASM_68K
CPUOBJS += obj/cpu/m68000/asmintf.o obj/cpu/m68000/68kem.oa
ASMDEFS += -DA68KEM
else
CPUOBJS += obj/cpu/m68000/m68kops.og obj/cpu/m68000/m68kopac.og \
           obj/cpu/m68000/m68kopdm.og obj/cpu/m68000/m68kopnz.og \
           obj/cpu/m68000/m68kcpu.o obj/cpu/m68000/m68kmame.o
endif
DBGOBJS += obj/cpu/m68000/d68k.o
endif

CPU=$(strip $(findstring M68020@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_M68020=1
ifdef X86_ASM_68K
CPUOBJS += obj/cpu/m68000/asmintf.o obj/cpu/m68000/68kem.oa
ASMDEFS += -DA68KEM
else
CPUOBJS += obj/cpu/m68000/m68kops.og obj/cpu/m68000/m68kopac.og \
           obj/cpu/m68000/m68kopdm.og obj/cpu/m68000/m68kopnz.og \
           obj/cpu/m68000/m68kcpu.o obj/cpu/m68000/m68kmame.o
endif
DBGOBJS += obj/cpu/m68000/d68k.o
endif

CPU=$(strip $(findstring T11@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_T11=1
CPUOBJS += obj/cpu/t11/t11.o
DBGOBJS += obj/cpu/t11/t11dasm.o
endif

CPU=$(strip $(findstring S2650@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_S2650=1
CPUOBJS += obj/cpu/s2650/s2650.o
DBGOBJS += obj/cpu/s2650/2650dasm.o
endif

CPU=$(strip $(findstring TMS34010@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_TMS34010=1
CPUOBJS += obj/cpu/tms34010/tms34010.o obj/cpu/tms34010/34010fld.o
DBGOBJS += obj/cpu/tms34010/34010dsm.o
endif

CPU=$(strip $(findstring TMS9900@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_TMS9900=1
CPUOBJS += obj/cpu/tms9900/tms9900.o
DBGOBJS += obj/cpu/tms9900/9900dasm.o
endif

CPU=$(strip $(findstring Z8000@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_Z8000=1
CPUOBJS += obj/cpu/z8000/z8000.o
DBGOBJS += obj/cpu/z8000/8000dasm.o
endif

CPU=$(strip $(findstring TMS320C10@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_TMS320C10=1
CPUOBJS += obj/cpu/tms32010/tms32010.o
DBGOBJS += obj/cpu/tms32010/32010dsm.o
endif

CPU=$(strip $(findstring CCPU@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_CCPU=1
CPUOBJS += obj/cpu/ccpu/ccpu.o obj/vidhrdw/cinemat.o
DBGOBJS += obj/cpu/ccpu/ccpudasm.o
endif

CPU=$(strip $(findstring PDP1@,$(CPUS)))
ifneq ($(CPU),)
CPUDEFS += -DHAS_PDP1=1
CPUOBJS += obj/cpu/pdp1/pdp1.o
DBGOBJS += obj/cpu/pdp1/pdp1dasm.o
endif



SOUND=$(strip $(findstring CUSTOM@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_CUSTOM=1
endif

SOUND=$(strip $(findstring SAMPLES@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_SAMPLES=1
SOUNDOBJS += obj/sound/samples.o
endif

SOUND=$(strip $(findstring DAC@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_DAC=1
SOUNDOBJS += obj/sound/dac.o
endif

SOUND=$(strip $(findstring AY8910@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_AY8910=1
SOUNDOBJS += obj/sound/ay8910.o
endif

SOUND=$(strip $(findstring YM2203@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2203=1
SOUNDOBJS += obj/sound/2203intf.o obj/sound/ay8910.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2151@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2151=1
SOUNDOBJS += obj/sound/2151intf.o obj/sound/ym2151.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2151_ALT@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2151_ALT=1
SOUNDOBJS += obj/sound/2151intf.o obj/sound/ym2151.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2608@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2608=1
SOUNDOBJS += obj/sound/2608intf.o obj/sound/ay8910.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2610@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2610=1
SOUNDOBJS += obj/sound/2610intf.o obj/sound/ay8910.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2610B@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2610B=1
SOUNDOBJS += obj/sound/2610intf.o obj/sound/ay8910.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2612@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2612=1
SOUNDOBJS += obj/sound/2612intf.o obj/sound/ay8910.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM3438@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM3438=1
SOUNDOBJS += obj/sound/2612intf.o obj/sound/ay8910.o obj/sound/fm.o
endif

SOUND=$(strip $(findstring YM2413@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM2413=1
SOUNDOBJS += obj/sound/3812intf.o obj/sound/ym2413.o obj/sound/ym3812.o obj/sound/fmopl.o
endif

SOUND=$(strip $(findstring YM3812@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM3812=1
SOUNDOBJS += obj/sound/3812intf.o obj/sound/ym3812.o obj/sound/fmopl.o
endif

SOUND=$(strip $(findstring YM3526@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_YM3526=1
SOUNDOBJS += obj/sound/3812intf.o obj/sound/ym3812.o obj/sound/fmopl.o
endif

SOUND=$(strip $(findstring Y8950@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_Y8950=1
SOUNDOBJS += obj/sound/3812intf.o obj/sound/fmopl.o obj/sound/ymdeltat.o
endif

SOUND=$(strip $(findstring SN76496@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_SN76496=1
SOUNDOBJS += obj/sound/sn76496.o
endif

SOUND=$(strip $(findstring POKEY@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_POKEY=1
SOUNDOBJS += obj/sound/pokey.o
endif

SOUND=$(strip $(findstring TIA@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_TIA=1
SOUNDOBJS += obj/sound/tiasound.o obj/sound/tiaintf.o
endif

SOUND=$(strip $(findstring NES@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_NES=1
SOUNDOBJS += obj/sound/nes.o obj/sound/nesintf.o
endif

SOUND=$(strip $(findstring ASTROCADE@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_ASTROCADE=1
SOUNDOBJS += obj/sound/astrocde.o
endif

SOUND=$(strip $(findstring NAMCO@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_NAMCO=1
SOUNDOBJS += obj/sound/namco.o
endif

SOUND=$(strip $(findstring TMS5220@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_TMS5220=1
SOUNDOBJS += obj/sound/tms5220.o obj/sound/5220intf.o
endif

SOUND=$(strip $(findstring VLM5030@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_VLM5030=1
SOUNDOBJS += obj/sound/vlm5030.o
endif

SOUND=$(strip $(findstring ADPCM@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_ADPCM=1
SOUNDOBJS += obj/sound/adpcm.o
endif

SOUND=$(strip $(findstring OKIM6295@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_OKIM6295=1
SOUNDOBJS += obj/sound/adpcm.o
endif

SOUND=$(strip $(findstring MSM5205@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_MSM5205=1
SOUNDOBJS += obj/sound/msm5205.o
endif

SOUND=$(strip $(findstring UPD7759@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_UPD7759=1
SOUNDOBJS += obj/sound/upd7759.o
endif

SOUND=$(strip $(findstring HC55516@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_HC55516=1
SOUNDOBJS += obj/sound/hc55516.o
endif

SOUND=$(strip $(findstring K005289@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_K005289=1
SOUNDOBJS += obj/sound/k005289.o
endif

SOUND=$(strip $(findstring K007232@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_K007232=1
SOUNDOBJS += obj/sound/k007232.o
endif

SOUND=$(strip $(findstring K051649@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_K051649=1
SOUNDOBJS += obj/sound/k051649.o
endif

SOUND=$(strip $(findstring K053260@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_K053260=1
SOUNDOBJS += obj/sound/k053260.o
endif

SOUND=$(strip $(findstring SEGAPCM@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_SEGAPCM=1
SOUNDOBJS += obj/sound/segapcm.o
endif

SOUND=$(strip $(findstring RF5C68@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_RF5C68=1
SOUNDOBJS += obj/sound/rf5c68.o
endif

SOUND=$(strip $(findstring CEM3394@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_CEM3394=1
SOUNDOBJS += obj/sound/cem3394.o
endif

SOUND=$(strip $(findstring C140@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_C140=1
SOUNDOBJS += obj/sound/c140.o
endif

SOUND=$(strip $(findstring QSOUND@,$(SOUNDS)))
ifneq ($(SOUND),)
SOUNDDEFS += -DHAS_QSOUND=1
SOUNDOBJS += obj/sound/qsound.o
endif



ifdef DEBUG
DEBUGDEF = -DMAME_DEBUG
else
DEBUGDEF =
endif

DEFS = -DX86_ASM -DLSB_FIRST -DINLINE="static __inline__" -Dasm=__asm__
CDEFS = $(DEFS) $(CPUDEFS) $(SOUNDDEFS) $(ASMDEFS) $(DEBUGDEF)

ifdef SYMBOLS
# Sorry for the -Wno-unused, but I was tired ;)
CFLAGS = -Isrc -Isrc/msdos -Iobj/cpu/m68000 -Isrc/cpu/m68000 \
	-O0 -pedantic -Wall -Werror -Wno-unused -g
else
CFLAGS = -Isrc -Isrc/msdos -Iobj/cpu/m68000 -Isrc/cpu/m68000 \
	$(ARCH) -O3 -fomit-frame-pointer -fstrict-aliasing \
	-Werror -Wall -Wno-sign-compare -Wunused \
	-Wpointer-arith -Wbad-function-cast -Wcast-align -Waggregate-return \
	-pedantic \
	-Wshadow \
	-Wstrict-prototypes
#   -W had to remove because of the "missing initializer" warning
#	-Wredundant-decls \
#	-Wlarger-than-27648 \
#	-Wcast-qual \
#	-Wwrite-strings \
#	-Wconversion \
#	-Wmissing-prototypes \
#	-Wmissing-declarations
endif

ifdef SYMBOLS
LDFLAGS =
else
#LDFLAGS = -s -Wl,--warn-common
LDFLAGS = -s
endif

LIBS   = -lalleg -laudio -lz \

COREOBJS = obj/version.o obj/mess/system.o obj/mame.o obj/mess/mess.o \
         obj/drawgfx.o obj/common.o obj/usrintrf.o \
         obj/cpuintrf.o obj/memory.o obj/timer.o obj/palette.o \
         obj/input.o obj/inptport.o obj/cheat.o obj/unzip.o \
         obj/audit.o obj/info.o obj/png.o obj/artwork.o \
         obj/tilemap.o obj/sprite.o obj/gfxobj.o \
         obj/state.o obj/datafile.o \
         $(sort $(CPUOBJS)) \
         obj/sndintrf.o \
         obj/sound/streams.o obj/sound/mixer.o \
         $(sort $(SOUNDOBJS)) \
         obj/sound/votrax.o \
         obj/machine/z80fmly.o obj/machine/6821pia.o \
         obj/machine/8255ppi.o \
         obj/vidhrdw/generic.o obj/vidhrdw/vector.o \
         obj/vidhrdw/avgdvg.o obj/machine/mathbox.o \
         obj/machine/ticket.o \
         obj/mamedbg.o obj/window.o \
         obj/profiler.o \
         $(sort $(DBGOBJS)) \

DRVLIBS = obj/coleco.a   \
          obj/sega.a     \
          obj/atari.a    \
          obj/gce.a      \
          obj/nintendo.a \
          obj/cbm.a      \
          obj/dragon.a   \
          obj/kaypro.a   \
          obj/dragon.a   \
          obj/trs80.a    \
          obj/cgenie.a   \
          obj/pdp1.a     \
          obj/spectrum.a \
          obj/apple2.a   \
          obj/ti99.a     \
          obj/bally.a    \
          obj/pc.a       \
          obj/amstrad.a  \
          obj/nec.a      \
          obj/ep128.a    \
          obj/other.a    \

NEOLIBS = obj/neogeo.a \

MSDOSOBJS = obj/msdos/msdos.o obj/msdos/video.o obj/msdos/blit.o obj/msdos/vector.o \
         obj/msdos/sound.o obj/msdos/input.o obj/msdos/fileio.o obj/msdos/config.o \
         obj/msdos/fronthlp.o \
         obj/msdos/gen15khz.o obj/msdos/ati15khz.o \

MSDOSOBJS += obj/msdos/nec765.o 

ifdef TINY_COMPILE
	OBJS = $(TINY_OBJS)
	TINYFLAGS = -DTINY_COMPILE -DTINY_NAME=$(TINY_NAME)
else
	ifdef NEOFREE
		OBJS = $(DRVLIBS)
		TINYFLAGS = -DNEOFREE
	else
		ifdef NEOMAME
			OBJS = $(NEOLIBS)
			TINYFLAGS = -DNEOMAME
		else
			OBJS = $(DRVLIBS) $(NEOLIBS)
			TINYFLAGS =
		endif
	endif
endif

all: $(EMULATOR_EXE) romcmp.exe

$(EMULATOR_EXE):  $(COREOBJS) $(MSDOSOBJS) $(OBJS) $(LIBS)
# always recompile the version string
	$(CC) $(CDEFS) $(CFLAGS) $(TINYFLAGS) -DMESS -c src/version.c -o obj/version.o
	$(LD) $(LDFLAGS) $(COREOBJS) $(MSDOSOBJS) $(OBJS) $(LIBS) -o $@
ifndef DEBUG
	upx $(EMULATOR_EXE)
endif

romcmp.exe: obj/romcmp.o obj/unzip.o
	$(LD) $(LDFLAGS) $^ -lz -o $@


obj/%.o: src/%.c
	$(CC) $(CDEFS) $(CFLAGS) $(TINYFLAGS) -DMESS -c $< -o $@

# generate C source files for the 68000 emulator
obj/cpu/m68000/%.c obj/cpu/m68000/%.h: src/cpu/m68000/m68kmake.c src/cpu/m68000/m68k_in.c
	$(CC) $(CDEFS) $(CFLAGS) -DDOS -o obj/cpu/m68000/m68kmake.exe $<
	obj/cpu/m68000/m68kmake obj/cpu/m68000 src/cpu/m68000/m68k_in.c

# generated C files for the 68000 emulator
obj/%.og: obj/%.c
	$(CC) $(CDEFS) $(CFLAGS) $(TINYFLAGS) -c $< -o $@

# generate asm source files for the 68000 emulator
obj/cpu/m68000/68kem.asm:  src/cpu/m68000/make68k.c
	$(CC) $(CDEFS) $(CFLAGS) -DDOS -o obj/cpu/m68000/make68k.exe $<
	obj/cpu/m68000/make68k $@

# generated asm files for the 68000 emulator
obj/cpu/m68000/68kem.oa:  obj/cpu/m68000/68kem.asm
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

obj/cpu/z80/z80.asm:  src/cpu/z80/makez80.c
	$(CC) $(CDEFS) $(CFLAGS) -DDOS -o obj/cpu/z80/makez80.exe $<
	obj/cpu/z80/makez80 $(Z80DEF) $(CDEFS) $(CFLAGS) $@

obj/%.a:
	 $(AR) cr $@ $^

obj/coleco.a:   \
                obj/mess/vidhrdw/tms9928a.o \
                obj/mess/machine/coleco.o   \
                obj/mess/vidhrdw/coleco.o   \
                obj/mess/systems/coleco.o   \

obj/sega.a:     \
                obj/mess/vidhrdw/smsvdp.o   \
                obj/mess/machine/sms.o      \
                obj/mess/systems/sms.o      \
                obj/mess/sndhrdw/genesis.o  \
                obj/mess/vidhrdw/genesis.o  \
                obj/mess/machine/genesis.o  \
                obj/mess/systems/genesis.o  \

obj/atari.a:    \
                obj/mess/machine/atari.o    \
                obj/mess/vidhrdw/antic.o    \
                obj/mess/vidhrdw/gtia.o     \
                obj/mess/vidhrdw/atari.o    \
                obj/mess/systems/atari.o    \
                obj/mess/vidhrdw/a7800.o    \
                obj/mess/machine/a7800.o    \
                obj/mess/systems/a7800.o    \
                obj/sndhrdw/exidy.o         \
                obj/mess/vidhrdw/a2600.o    \
                obj/mess/machine/a2600.o    \
                obj/mess/systems/a2600.o    \

obj/gce.a:      \
                obj/mess/machine/6522via.o  \
                obj/mess/vidhrdw/vectrex.o  \
                obj/mess/machine/vectrex.o  \
                obj/mess/systems/vectrex.o  \

obj/nintendo.a: \
                obj/mess/machine/nes_mmc.o  \
                obj/mess/vidhrdw/nes.o      \
                obj/mess/machine/nes.o      \
                obj/mess/systems/nes.o      \

obj/cbm.a:      \
                obj/mess/vidhrdw/amiga.o    \
                obj/mess/machine/amiga.o    \
                obj/mess/systems/amiga.o    \
		obj/mess/vidhrdw/vic6560.o  \
		obj/mess/sndhrdw/vic6560.o  \
		obj/mess/machine/6522via2.o \
		obj/mess/machine/vc20.o     \
		obj/mess/systems/vc20.o     \
		obj/mess/vidhrdw/ted7360.o  \
		obj/mess/sndhrdw/ted7360.o  \
		obj/mess/machine/c1551.o    \
		obj/mess/machine/c16.o      \
		obj/mess/systems/c16.o	    


obj/dragon.a:   \
                obj/mess/vidhrdw/dragon.o   \
                obj/mess/machine/dragon.o   \
                obj/mess/systems/dragon.o   

obj/trs80.a:    \
                obj/mess/machine/trs80.o    \
                obj/mess/machine/wd179x.o   \
                obj/mess/vidhrdw/trs80.o    \
                obj/mess/systems/trs80.o    

obj/cgenie.a:   \
                obj/mess/machine/cgenie.o   \
                obj/mess/machine/wd179x.o   \
                obj/mess/vidhrdw/m6845.o    \
                obj/mess/sndhrdw/cgenie.o   \
                obj/mess/systems/cgenie.o   

obj/pdp1.a:     \
                obj/mess/vidhrdw/pdp1.o     \
                obj/mess/machine/pdp1.o     \
                obj/mess/systems/pdp1.o     

obj/kaypro.a:   \
                obj/mess/machine/cpm_bios.o \
                obj/mess/vidhrdw/kaypro.o   \
                obj/mess/machine/kaypro.o   \
                obj/mess/systems/kaypro.o   \
               #obj/mess/machine/cpm_disk.o \      this is screwed ;-)

obj/spectrum.a: \
                obj/mess/vidhrdw/spectrum.o \
                obj/mess/machine/spectrum.o \
                obj/mess/systems/spectrum.o \

obj/apple2.a:   \
                obj/mess/machine/ay3600.o   \
                obj/mess/machine/ap_disk2.o \
                obj/mess/vidhrdw/apple2.o   \
                obj/mess/machine/apple2.o   \
                obj/mess/systems/apple2.o   \

obj/ti99.a:     \
                obj/mess/machine/ti99_4x.o  \
                obj/mess/systems/ti99_4x.o  \
                #obj/mess/systems/ti99_2.o   \

obj/bally.a:    \
                obj/sound/astrocde.o        \
                obj/mess/vidhrdw/astrocde.o \
                obj/mess/machine/astrocde.o \
                obj/mess/systems/astrocde.o \

obj/pc.a:       \
                obj/mess/sndhrdw/pc.o       \
                obj/mess/vidhrdw/pc.o       \
                obj/mess/vidhrdw/pc_cga.o   \
                obj/mess/vidhrdw/pc_mda.o   \
                obj/mess/vidhrdw/pc_t1t.o   \
                obj/mess/machine/pc.o       \
                obj/mess/machine/pc_fdc.o   \
                obj/mess/machine/pc_hdc.o   \
                obj/mess/machine/pc_ide.o   \
                obj/mess/systems/pc.o       \

obj/amstrad.a:  \
                obj/mess/sndhrdw/amstrad.o  \
		obj/mess/vidhrdw/hd6845s.o  \
                obj/mess/vidhrdw/amstrad.o  \
                obj/mess/machine/amstrad.o  \
		obj/mess/systems/i8255.o    \
                obj/mess/systems/amstrad.o  \

obj/nec.a:  \
		obj/mess/vidhrdw/vdc.o      \
                obj/mess/machine/pce.o      \
                obj/mess/systems/pce.o      \


obj/ep128.a :   \
                obj/mess/sndhrdw/dave.o     \
                obj/mess/vidhrdw/epnick.o   \
                obj/mess/vidhrdw/enterp.o   \
                obj/mess/machine/enterp.o   \
                obj/mess/systems/enterp.o   \

obj/other.a :   \
                obj/mess/systems/kim1.o     \
		obj/mess/vidhrdw/oric.o     \
                obj/mess/machine/oric.o     \
                obj/mess/systems/oric.o     \
                obj/mess/vidhrdw/vz.o       \
                obj/mess/machine/vz.o       \
                obj/mess/systems/vz.o       \

# dependencies
obj/cpu/z80/z80.o:  z80.c z80.h z80daa.h
obj/cpu/i8085/i8085.o: i8085.c i8085.h i8085cpu.h i8085daa.h
obj/cpu/m6502/m6502.o: m6502.c m6502.h m6502ops.h tbl6502.c tbl65c02.c tbl6510.c
obj/cpu/m6502/h6280.o: h6280.c h6280.h h6280ops.h tblh6280.c
obj/cpu/i86/i86.o:  i86.c i86.h i86intrf.h ea.h host.h instr.h modrm.h
obj/cpu/m6800/m6800.o:	m6800.c m6800.h 6800ops.c
obj/cpu/m6805/m6805.o:	m6805.c m6805.h 6805ops.c
obj/cpu/m6809/m6809.o:	m6809.c m6809.h 6809ops.c 6809tbl.c
obj/cpu/tms34010/tms34010.o: tms34010.c tms34010.h 34010ops.c 34010tbl.c
obj/cpu/tms9900/tms9900.o: tms9900.c tms9900.h 9900stat.h
obj/cpu/z8000/z8000.o: z8000.c z8000.h z8000cpu.h z8000dab.h z8000ops.c z8000tbl.c
obj/cpu/tms32010/tms32010.o: tms32010.c tms32010.h
obj/cpu/ccpu/ccpu.o: ccpu.h ccpudasm.c
obj/cpu/m68000/m68kcpu.o: obj/cpu/m68000/m68kops.c m68kmake.c m68k_in.c


makedir:
	@echo make makedir is no longer necessary, just type make

maketree:
	md obj
	md obj\cpu
	md obj\cpu\gensync
	md obj\cpu\z80
	md obj\cpu\m6502
	md obj\cpu\h6280
	md obj\cpu\i86
	md obj\cpu\nec
	md obj\cpu\i8039
	md obj\cpu\i8085
	md obj\cpu\m6800
	md obj\cpu\m6805
	md obj\cpu\m6809
	md obj\cpu\konami
	md obj\cpu\m68000
	md obj\cpu\s2650
	md obj\cpu\t11
	md obj\cpu\tms34010
	md obj\cpu\tms9900
	md obj\cpu\z8000
	md obj\cpu\tms32010
	md obj\cpu\ccpu
	md obj\cpu\pdp1
	md obj\sound
	md obj\drivers
	md obj\machine
	md obj\vidhrdw
	md obj\sndhrdw
	md obj\msdos
	make messdir

clean:
	deltree /Y obj
	del $(EMULATOR_EXE)
	del romcmp.exe

cleandebug:
	del obj\*.o
	del obj\cpu\gensync\*.o
	del obj\cpu\z80\*.o
	del obj\cpu\z80\*.oa
	del obj\cpu\z80\*.asm
	del obj\cpu\z80\*.exe
	del obj\cpu\m6502\*.o
	del obj\cpu\h6280\*.o
	del obj\cpu\i86\*.o
	del obj\cpu\nec\*.o
	del obj\cpu\i8039\*.o
	del obj\cpu\i8085\*.o
	del obj\cpu\m6800\*.o
	del obj\cpu\m6800\*.oa
	del obj\cpu\m6800\*.exe
	del obj\cpu\m6805\*.o
	del obj\cpu\m6809\*.o
	del obj\cpu\konami\*.o
	del obj\cpu\m68000\*.o
	del obj\cpu\m68000\*.c
	del obj\cpu\m68000\*.h
	del obj\cpu\m68000\*.oa
	del obj\cpu\m68000\*.og
	del obj\cpu\m68000\*.asm
	del obj\cpu\m68000\*.exe
	del obj\cpu\s2650\*.o
	del obj\cpu\t11\*.o
	del obj\cpu\tms34010\*.o
	del obj\cpu\tms9900\*.o
	del obj\cpu\z8000\*.o
	del obj\cpu\tms32010\*.o
	del obj\cpu\ccpu\*.o
	del obj\cpu\pdp1\*.o
	del $(EMULATOR_EXE)

cleantiny:
	del obj\mame.o
	del obj\driver.o
	del obj\usrintrf.o
	del obj\cheat.o
	del obj\msdos\fronthlp.o


messdir:
	md obj\mess
	md obj\mess\machine
	md obj\mess\systems
	md obj\mess\vidhrdw
	md obj\mess\sndhrdw



